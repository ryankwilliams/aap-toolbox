---
- name: Recover web server
  hosts: web_server

  vars:
    cloud_provider: "{{ lookup('ansible.builtin.env', 'CLOUD_PROVIDER', default='') }}"
    region_name: "{{ lookup('ansible.builtin.env', 'AWS_REGION', default='us-east-1') }}"
    server_url: "http://{{ ansible_facts.default_ipv4.address }}:80"

  tasks:
    - name: Validate global input
      ansible.builtin.include_role:
        name: ryankwilliams.aap_toolbox.vm
        tasks_from: validate_global_input.yml

    - name: Get aws ec2 server public ip address
      when: cloud_provider == "aws"
      ansible.builtin.include_tasks: tasks/get_aws_server_public_ip.yml

    - name: Gather services facts
      ansible.builtin.service_facts:

    - name: Check the httpd response status
      ansible.builtin.uri:
        url: "{{ server_url }}"
        method: GET
        validate_certs: false
      register: response_check
      delegate_to: localhost
      ignore_errors: true

    - name: Start httpd service when stopped
      ansible.builtin.service:
        name: httpd
        state: started
      when: ansible_facts.services['httpd.service']['state'] and response_check.status != 200
      become: true

    - name: Verify httpd server is available
      ansible.builtin.uri:
        url: "{{ server_url }}"
        method: GET
        return_content: true
        validate_certs: false
        status_code: 200
      register: get_result
      delegate_to: localhost

    - name: Verify content on static page
      ansible.builtin.assert:
        that: "'Hello World!' in get_result.content"
